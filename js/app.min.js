(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

require('./modules/nav');

require('./modules/tabs');

require('./modules/openClose');

var initJs = function initJs() {
    $('div.open-box-text').openClose;
    $('body').on('click', '.scroll-link', function () {
        var offset = $('.body-holder').position().top;
        $("body, .modal").animate({ scrollTop: offset }, '.3');
    });
    $(".fancybox-media").fancybox({
        openEffect: 'none',
        closeEffect: 'none',
        helpers: {
            media: {}
        }
    });
    $(function () {
        if ($(window).width() > 1024) {
            $('.scroll-block').jScrollPane();
        }
    });
    $(".economes-popup").fancybox({
        maxWidth: 500,
        maxHeight: 400,
        fitToView: true,
        autoSize: true,
        closeClick: false,
        openEffect: 'none',
        closeEffect: 'none'
    });
    $(".fancybox-media").fancybox({
        openEffect: 'none',
        closeEffect: 'none',
        helpers: {
            media: {}
        }
    });
    skrollr.init({ forceHeight: false });
    $('#modalChapter').on('shown.bs.modal', function () {
        skrollr.init().destroy();
        skrollr.init({ forceHeight: false });
        initJs();
    });
    $('#modalChapter').on('hidden.bs.modal', function () {
        skrollr.init().destroy();
    });
};

jQuery(document).ready(function ($) {
    initJs();
});

},{"./modules/nav":2,"./modules/openClose":3,"./modules/tabs":4}],2:[function(require,module,exports){
"use strict";

// page init
jQuery(function () {
    initMobileNav();
    $(".drop-opener").click(function (event) {
        event.preventDefault();
        $(this).parent().find(".dropdown").toggleClass("opened");
    });
    $("body").click(function (e) {
        if ($(e.target).closest(".holder2").length == 0) $(".dropdown").removeClass("opened");
        if ($(e.target).closest(".share-opened").length == 0) $(".share-holder").removeClass("share-opened");
    });
    $(".share-holder").click(function (event) {
        event.preventDefault();
        $(this).toggleClass("share-opened");
    });
});

// mobile menu init
function initMobileNav() {
    jQuery('body').mobileNav({
        hideOnClickOutside: true,
        menuActiveClass: 'nav-active',
        menuOpener: '.menu-opener',
        menuDrop: '.nav-holder'
    });
}

/*
 * Simple Mobile Navigation
 */
;
(function ($) {
    function MobileNav(options) {
        this.options = $.extend({
            container: null,
            hideOnClickOutside: false,
            menuActiveClass: 'nav-active',
            menuOpener: '.nav-opener',
            menuDrop: '.nav-drop',
            toggleEvent: 'click',
            outsideClickEvent: 'click touchstart pointerdown MSPointerDown'
        }, options);
        this.initStructure();
        this.attachEvents();
    }
    MobileNav.prototype = {
        initStructure: function initStructure() {
            this.page = $('html');
            this.container = $(this.options.container);
            this.opener = this.container.find(this.options.menuOpener);
            this.drop = this.container.find(this.options.menuDrop);
        },
        attachEvents: function attachEvents() {
            var self = this;

            if (activateResizeHandler) {
                activateResizeHandler();
                activateResizeHandler = null;
            }

            this.outsideClickHandler = function (e) {
                if (self.isOpened()) {
                    var target = $(e.target);
                    if (!target.closest(self.opener).length && !target.closest(self.drop).length) {
                        self.hide();
                    }
                }
            };

            this.openerClickHandler = function (e) {
                e.preventDefault();
                self.toggle();
            };

            this.opener.on(this.options.toggleEvent, this.openerClickHandler);
        },
        isOpened: function isOpened() {
            return this.container.hasClass(this.options.menuActiveClass);
        },
        show: function show() {
            this.container.addClass(this.options.menuActiveClass);
            if (this.options.hideOnClickOutside) {
                this.page.on(this.options.outsideClickEvent, this.outsideClickHandler);
            }
        },
        hide: function hide() {
            this.container.removeClass(this.options.menuActiveClass);
            if (this.options.hideOnClickOutside) {
                this.page.off(this.options.outsideClickEvent, this.outsideClickHandler);
            }
        },
        toggle: function toggle() {
            if (this.isOpened()) {
                this.hide();
            } else {
                this.show();
            }
        },
        destroy: function destroy() {
            this.container.removeClass(this.options.menuActiveClass);
            this.opener.off(this.options.toggleEvent, this.clickHandler);
            this.page.off(this.options.outsideClickEvent, this.outsideClickHandler);
        }
    };

    var activateResizeHandler = function activateResizeHandler() {
        var win = $(window),
            doc = $('html'),
            resizeClass = 'resize-active',
            flag,
            timer;
        var removeClassHandler = function removeClassHandler() {
            flag = false;
            doc.removeClass(resizeClass);
        };
        var resizeHandler = function resizeHandler() {
            if (!flag) {
                flag = true;
                doc.addClass(resizeClass);
            }
            clearTimeout(timer);
            timer = setTimeout(removeClassHandler, 500);
        };
        win.on('resize orientationchange', resizeHandler);
    };

    $.fn.mobileNav = function (options) {
        return this.each(function () {
            var params = $.extend({}, options, { container: this }),
                instance = new MobileNav(params);
            $.data(this, 'MobileNav', instance);
        });
    };
})(jQuery);

},{}],3:[function(require,module,exports){
'use strict';

/*
 * jQuery Open/Close plugin
 */
;
(function ($) {
    function OpenClose(options) {
        this.options = $.extend({
            addClassBeforeAnimation: true,
            hideOnClickOutside: false,
            activeClass: 'active',
            opener: '.opener',
            slider: '.slide',
            animSpeed: 400,
            effect: 'fade',
            event: 'click'
        }, options);
        this.init();
    }
    OpenClose.prototype = {
        init: function init() {
            if (this.options.holder) {
                this.findElements();
                this.attachEvents();
                this.makeCallback('onInit', this);
            }
        },
        findElements: function findElements() {
            this.holder = $(this.options.holder);
            this.opener = this.holder.find(this.options.opener);
            this.slider = this.holder.find(this.options.slider);
        },
        attachEvents: function attachEvents() {
            // add handler
            var self = this;
            this.eventHandler = function (e) {
                e.preventDefault();
                if (self.slider.hasClass(slideHiddenClass)) {
                    self.showSlide();
                } else {
                    self.hideSlide();
                }
            };
            self.opener.bind(self.options.event, this.eventHandler);

            // hover mode handler
            if (self.options.event === 'over') {
                self.opener.bind('mouseenter', function () {
                    if (!self.holder.hasClass(self.options.activeClass)) {
                        self.showSlide();
                    }
                });
                self.holder.bind('mouseleave', function () {
                    self.hideSlide();
                });
            }

            // outside click handler
            self.outsideClickHandler = function (e) {
                if (self.options.hideOnClickOutside) {
                    var target = $(e.target);
                    if (!target.is(self.holder) && !target.closest(self.holder).length) {
                        self.hideSlide();
                    }
                }
            };

            // set initial styles
            if (this.holder.hasClass(this.options.activeClass)) {
                $(document).bind('click touchstart', self.outsideClickHandler);
            } else {
                this.slider.addClass(slideHiddenClass);
            }
        },
        showSlide: function showSlide() {
            var self = this;
            if (self.options.addClassBeforeAnimation) {
                self.holder.addClass(self.options.activeClass);
            }
            self.slider.removeClass(slideHiddenClass);
            $(document).bind('click touchstart', self.outsideClickHandler);

            self.makeCallback('animStart', true);
            toggleEffects[self.options.effect].show({
                box: self.slider,
                speed: self.options.animSpeed,
                complete: function complete() {
                    if (!self.options.addClassBeforeAnimation) {
                        self.holder.addClass(self.options.activeClass);
                    }
                    self.makeCallback('animEnd', true);
                }
            });
        },
        hideSlide: function hideSlide() {
            var self = this;
            if (self.options.addClassBeforeAnimation) {
                self.holder.removeClass(self.options.activeClass);
            }
            $(document).unbind('click touchstart', self.outsideClickHandler);

            self.makeCallback('animStart', false);
            toggleEffects[self.options.effect].hide({
                box: self.slider,
                speed: self.options.animSpeed,
                complete: function complete() {
                    if (!self.options.addClassBeforeAnimation) {
                        self.holder.removeClass(self.options.activeClass);
                    }
                    self.slider.addClass(slideHiddenClass);
                    self.makeCallback('animEnd', false);
                }
            });
        },
        destroy: function destroy() {
            this.slider.removeClass(slideHiddenClass).css({ display: '' });
            this.opener.unbind(this.options.event, this.eventHandler);
            this.holder.removeClass(this.options.activeClass).removeData('OpenClose');
            $(document).unbind('click touchstart', this.outsideClickHandler);
        },
        makeCallback: function makeCallback(name) {
            if (typeof this.options[name] === 'function') {
                var args = Array.prototype.slice.call(arguments);
                args.shift();
                this.options[name].apply(this, args);
            }
        }
    };

    // add stylesheet for slide on DOMReady
    var slideHiddenClass = 'js-slide-hidden';
    (function () {
        var tabStyleSheet = $('<style type="text/css">')[0];
        var tabStyleRule = '.' + slideHiddenClass;
        tabStyleRule += '{position:absolute !important;left:-9999px !important;top:-9999px !important;display:block !important}';
        if (tabStyleSheet.styleSheet) {
            tabStyleSheet.styleSheet.cssText = tabStyleRule;
        } else {
            tabStyleSheet.appendChild(document.createTextNode(tabStyleRule));
        }
        $('head').append(tabStyleSheet);
    })();

    // animation effects
    var toggleEffects = {
        slide: {
            show: function show(o) {
                o.box.stop(true).hide().slideDown(o.speed, o.complete);
            },
            hide: function hide(o) {
                o.box.stop(true).slideUp(o.speed, o.complete);
            }
        },
        fade: {
            show: function show(o) {
                o.box.stop(true).hide().fadeIn(o.speed, o.complete);
            },
            hide: function hide(o) {
                o.box.stop(true).fadeOut(o.speed, o.complete);
            }
        },
        none: {
            show: function show(o) {
                o.box.hide().show(0, o.complete);
            },
            hide: function hide(o) {
                o.box.hide(0, o.complete);
            }
        }
    };

    // jQuery plugin interface
    $.fn.openClose = function (opt) {
        return this.each(function () {
            jQuery(this).data('OpenClose', new OpenClose($.extend(opt, { holder: this })));
        });
    };
})(jQuery);

},{}],4:[function(require,module,exports){
'use strict';

// page init
jQuery(function () {
	initTabs();
});

// content tabs init
function initTabs() {
	jQuery('ul.tabset').tabset({
		tabLinks: 'a',
		defaultTab: false
	});
}

/*
 * jQuery Tabs plugin
 */

;(function ($, $win) {
	'use strict';

	function Tabset($holder, options) {
		this.$holder = $holder;
		this.options = options;

		this.init();
		this.makeCallback('onInit', this);
	}

	Tabset.prototype = {
		init: function init() {
			this.$tabLinks = this.$holder.find(this.options.tabLinks);

			this.setStartActiveIndex();
			this.setActiveTab();

			if (this.options.autoHeight) {
				this.$tabHolder = $(this.$tabLinks.eq(0).attr(this.options.attrib)).parent();
			}
		},

		setStartActiveIndex: function setStartActiveIndex() {
			var $classTargets = this.getClassTarget(this.$tabLinks);
			var $activeLink = $classTargets.filter('.' + this.options.activeClass);
			var $hashLink = this.$tabLinks.filter('[' + this.options.attrib + '="' + location.hash + '"]');
			var activeIndex;

			if (this.options.checkHash && $hashLink.length) {
				$activeLink = $hashLink;
			}

			activeIndex = $classTargets.index($activeLink);

			this.activeTabIndex = this.prevTabIndex = activeIndex === -1 ? this.options.defaultTab ? 0 : null : activeIndex;
		},

		setActiveTab: function setActiveTab() {
			var self = this;

			this.$tabLinks.each(function (i, link) {
				var $link = $(link);
				var $classTarget = self.getClassTarget($link);
				var $tab = $($link.attr(self.options.attrib));

				if (i !== self.activeTabIndex) {
					$classTarget.removeClass(self.options.activeClass);
					$tab.addClass(self.options.tabHiddenClass).removeClass(self.options.activeClass);
				} else {
					$classTarget.addClass(self.options.activeClass);
					$tab.removeClass(self.options.tabHiddenClass).addClass(self.options.activeClass);
				}

				self.attachTabLink($link, i);
			});
		},

		attachTabLink: function attachTabLink($link, i) {
			var self = this;

			$link.on(this.options.event + '.tabset', function (e) {
				e.preventDefault();

				if (self.activeTabIndex === self.prevTabIndex && self.activeTabIndex !== i) {
					self.activeTabIndex = i;
					self.switchTabs();
				}
			});
		},

		resizeHolder: function resizeHolder(height) {
			var self = this;

			if (height) {
				this.$tabHolder.height(height);
				setTimeout(function () {
					self.$tabHolder.addClass('transition');
				}, 10);
			} else {
				self.$tabHolder.removeClass('transition').height('');
			}
		},

		switchTabs: function switchTabs() {
			var self = this;

			var $prevLink = this.$tabLinks.eq(this.prevTabIndex);
			var $nextLink = this.$tabLinks.eq(this.activeTabIndex);

			var $prevTab = this.getTab($prevLink);
			var $nextTab = this.getTab($nextLink);

			$prevTab.removeClass(this.options.activeClass);

			if (self.haveTabHolder()) {
				this.resizeHolder($prevTab.outerHeight());
			}

			setTimeout(function () {
				self.getClassTarget($prevLink).removeClass(self.options.activeClass);

				$prevTab.addClass(self.options.tabHiddenClass);
				$nextTab.removeClass(self.options.tabHiddenClass).addClass(self.options.activeClass);

				self.getClassTarget($nextLink).addClass(self.options.activeClass);

				if (self.haveTabHolder()) {
					self.resizeHolder($nextTab.outerHeight());

					setTimeout(function () {
						self.resizeHolder();
						self.prevTabIndex = self.activeTabIndex;
					}, self.options.animSpeed);
				} else {
					self.prevTabIndex = self.activeTabIndex;
				}
				// onchange callback
				self.makeCallback('onChange', self, $nextLink);
			}, this.options.autoHeight ? this.options.animSpeed : 1);
		},

		getClassTarget: function getClassTarget($link) {
			return this.options.addToParent ? $link.parent() : $link;
		},

		getActiveTab: function getActiveTab() {
			return this.getTab(this.$tabLinks.eq(this.activeTabIndex));
		},

		getTab: function getTab($link) {
			return $($link.attr(this.options.attrib));
		},

		haveTabHolder: function haveTabHolder() {
			return this.$tabHolder && this.$tabHolder.length;
		},

		makeCallback: function makeCallback(name) {
			if (typeof this.options[name] === 'function') {
				var args = Array.prototype.slice.call(arguments);
				args.shift();
				this.options[name].apply(this, args);
			}
		},

		destroy: function destroy() {
			var self = this;

			this.$tabLinks.off('.tabset').each(function () {
				var $link = $(this);

				self.getClassTarget($link).removeClass(self.options.activeClass);
				$($link.attr(self.options.attrib)).removeClass(self.options.activeClass + ' ' + self.options.tabHiddenClass);
			});

			this.$holder.removeData('Tabset');
		}
	};

	$.fn.tabset = function (options) {
		options = $.extend({
			activeClass: 'active',
			addToParent: false,
			autoHeight: false,
			checkHash: false,
			defaultTab: true,
			animSpeed: 500,
			tabLinks: 'a',
			attrib: 'href',
			event: 'click',
			tabHiddenClass: 'js-tab-hidden'
		}, options);
		options.autoHeight = options.autoHeight && $.support.opacity;

		return this.each(function () {
			var $holder = $(this);

			if (!$holder.data('Tabset')) {
				$holder.data('Tabset', new Tabset($holder, options));
			}
		});
	};
})(jQuery, jQuery(window));

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmNcXGpzXFxhcHAuanMiLCJzcmNcXGpzXFxtb2R1bGVzXFxuYXYuanMiLCJzcmNcXGpzXFxtb2R1bGVzXFxvcGVuQ2xvc2UuanMiLCJzcmNcXGpzXFxtb2R1bGVzXFx0YWJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJLFNBQVMsU0FBVCxNQUFTLEdBQVc7QUFDcEIsTUFBRSxtQkFBRixFQUF1QixTQUF2QjtBQUNBLE1BQUUsTUFBRixFQUFVLEVBQVYsQ0FBYSxPQUFiLEVBQXNCLGNBQXRCLEVBQXNDLFlBQVc7QUFDN0MsWUFBSSxTQUFTLEVBQUUsY0FBRixFQUFrQixRQUFsQixHQUE2QixHQUExQztBQUNBLFVBQUUsY0FBRixFQUFrQixPQUFsQixDQUEwQixFQUFFLFdBQVcsTUFBYixFQUExQixFQUFpRCxJQUFqRDtBQUNILEtBSEQ7QUFJQSxNQUFFLGlCQUFGLEVBQXFCLFFBQXJCLENBQThCO0FBQzFCLG9CQUFZLE1BRGM7QUFFMUIscUJBQWEsTUFGYTtBQUcxQixpQkFBUztBQUNMLG1CQUFPO0FBREY7QUFIaUIsS0FBOUI7QUFPQSxNQUFFLFlBQVc7QUFDVCxZQUFJLEVBQUUsTUFBRixFQUFVLEtBQVYsS0FBb0IsSUFBeEIsRUFBOEI7QUFDMUIsY0FBRSxlQUFGLEVBQW1CLFdBQW5CO0FBQ0g7QUFDSixLQUpEO0FBS0EsTUFBRSxpQkFBRixFQUFxQixRQUFyQixDQUE4QjtBQUMxQixrQkFBVSxHQURnQjtBQUUxQixtQkFBVyxHQUZlO0FBRzFCLG1CQUFXLElBSGU7QUFJMUIsa0JBQVUsSUFKZ0I7QUFLMUIsb0JBQVksS0FMYztBQU0xQixvQkFBWSxNQU5jO0FBTzFCLHFCQUFhO0FBUGEsS0FBOUI7QUFTQSxNQUFFLGlCQUFGLEVBQXFCLFFBQXJCLENBQThCO0FBQzFCLG9CQUFZLE1BRGM7QUFFMUIscUJBQWEs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dUxRLE9BQU8sTUFBUCxDQXZMUixDQUFEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImltcG9ydCAnLi9tb2R1bGVzL25hdic7XHJcbmltcG9ydCAnLi9tb2R1bGVzL3RhYnMnO1xyXG5pbXBvcnQgJy4vbW9kdWxlcy9vcGVuQ2xvc2UnO1xyXG5cclxudmFyIGluaXRKcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJCgnZGl2Lm9wZW4tYm94LXRleHQnKS5vcGVuQ2xvc2U7XHJcbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5zY3JvbGwtbGluaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBvZmZzZXQgPSAkKCcuYm9keS1ob2xkZXInKS5wb3NpdGlvbigpLnRvcDtcclxuICAgICAgICAkKFwiYm9keSwgLm1vZGFsXCIpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IG9mZnNldCB9LCAnLjMnKTtcclxuICAgIH0pO1xyXG4gICAgJChcIi5mYW5jeWJveC1tZWRpYVwiKS5mYW5jeWJveCh7XHJcbiAgICAgICAgb3BlbkVmZmVjdDogJ25vbmUnLFxyXG4gICAgICAgIGNsb3NlRWZmZWN0OiAnbm9uZScsXHJcbiAgICAgICAgaGVscGVyczoge1xyXG4gICAgICAgICAgICBtZWRpYToge31cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgICQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gMTAyNCkge1xyXG4gICAgICAgICAgICAkKCcuc2Nyb2xsLWJsb2NrJykualNjcm9sbFBhbmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgICQoXCIuZWNvbm9tZXMtcG9wdXBcIikuZmFuY3lib3goe1xyXG4gICAgICAgIG1heFdpZHRoOiA1MDAsXHJcbiAgICAgICAgbWF4SGVpZ2h0OiA0MDAsXHJcbiAgICAgICAgZml0VG9WaWV3OiB0cnVlLFxyXG4gICAgICAgIGF1dG9TaXplOiB0cnVlLFxyXG4gICAgICAgIGNsb3NlQ2xpY2s6IGZhbHNlLFxyXG4gICAgICAgIG9wZW5FZmZlY3Q6ICdub25lJyxcclxuICAgICAgICBjbG9zZUVmZmVjdDogJ25vbmUnXHJcbiAgICB9KTtcclxuICAgICQoXCIuZmFuY3lib3gtbWVkaWFcIikuZmFuY3lib3goe1xyXG4gICAgICAgIG9wZW5FZmZlY3Q6ICdub25lJyxcclxuICAgICAgICBjbG9zZUVmZmVjdDogJ25vbmUnLFxyXG4gICAgICAgIGhlbHBlcnM6IHtcclxuICAgICAgICAgICAgbWVkaWE6IHt9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBza3JvbGxyLmluaXQoeyBmb3JjZUhlaWdodDogZmFsc2UgfSk7XHJcbiAgICAkKCcjbW9kYWxDaGFwdGVyJykub24oJ3Nob3duLmJzLm1vZGFsJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2tyb2xsci5pbml0KCkuZGVzdHJveSgpO1xyXG4gICAgICAgIHNrcm9sbHIuaW5pdCh7IGZvcmNlSGVpZ2h0OiBmYWxzZSB9KTtcclxuICAgICAgICBpbml0SnMoKTtcclxuICAgIH0pO1xyXG4gICAgJCgnI21vZGFsQ2hhcHRlcicpLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBza3JvbGxyLmluaXQoKS5kZXN0cm95KCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigkKSB7XHJcbiAgICBpbml0SnMoKTtcclxufSk7XHJcbiIsIi8vIHBhZ2UgaW5pdFxyXG5qUXVlcnkoZnVuY3Rpb24oKSB7XHJcbiAgICBpbml0TW9iaWxlTmF2KCk7XHJcbiAgICAkKFwiLmRyb3Atb3BlbmVyXCIpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoXCIuZHJvcGRvd25cIikudG9nZ2xlQ2xhc3MoXCJvcGVuZWRcIik7XHJcbiAgICB9KTtcclxuICAgICQoXCJib2R5XCIpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoJChlLnRhcmdldCkuY2xvc2VzdChcIi5ob2xkZXIyXCIpLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICAkKFwiLmRyb3Bkb3duXCIpLnJlbW92ZUNsYXNzKFwib3BlbmVkXCIpO1xyXG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5jbG9zZXN0KFwiLnNoYXJlLW9wZW5lZFwiKS5sZW5ndGggPT0gMClcclxuICAgICAgICAgICAgJChcIi5zaGFyZS1ob2xkZXJcIikucmVtb3ZlQ2xhc3MoXCJzaGFyZS1vcGVuZWRcIik7XHJcbiAgICB9KTtcclxuICAgICQoXCIuc2hhcmUtaG9sZGVyXCIpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwic2hhcmUtb3BlbmVkXCIpO1xyXG4gICAgfSk7XHJcblxyXG59KTtcclxuXHJcbi8vIG1vYmlsZSBtZW51IGluaXRcclxuZnVuY3Rpb24gaW5pdE1vYmlsZU5hdigpIHtcclxuICAgIGpRdWVyeSgnYm9keScpLm1vYmlsZU5hdih7XHJcbiAgICAgICAgaGlkZU9uQ2xpY2tPdXRzaWRlOiB0cnVlLFxyXG4gICAgICAgIG1lbnVBY3RpdmVDbGFzczogJ25hdi1hY3RpdmUnLFxyXG4gICAgICAgIG1lbnVPcGVuZXI6ICcubWVudS1vcGVuZXInLFxyXG4gICAgICAgIG1lbnVEcm9wOiAnLm5hdi1ob2xkZXInXHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcblxyXG4vKlxyXG4gKiBTaW1wbGUgTW9iaWxlIE5hdmlnYXRpb25cclxuICovXHJcbjtcclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgIGZ1bmN0aW9uIE1vYmlsZU5hdihvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe1xyXG4gICAgICAgICAgICBjb250YWluZXI6IG51bGwsXHJcbiAgICAgICAgICAgIGhpZGVPbkNsaWNrT3V0c2lkZTogZmFsc2UsXHJcbiAgICAgICAgICAgIG1lbnVBY3RpdmVDbGFzczogJ25hdi1hY3RpdmUnLFxyXG4gICAgICAgICAgICBtZW51T3BlbmVyOiAnLm5hdi1vcGVuZXInLFxyXG4gICAgICAgICAgICBtZW51RHJvcDogJy5uYXYtZHJvcCcsXHJcbiAgICAgICAgICAgIHRvZ2dsZUV2ZW50OiAnY2xpY2snLFxyXG4gICAgICAgICAgICBvdXRzaWRlQ2xpY2tFdmVudDogJ2NsaWNrIHRvdWNoc3RhcnQgcG9pbnRlcmRvd24gTVNQb2ludGVyRG93bidcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmluaXRTdHJ1Y3R1cmUoKTtcclxuICAgICAgICB0aGlzLmF0dGFjaEV2ZW50cygpO1xyXG4gICAgfVxyXG4gICAgTW9iaWxlTmF2LnByb3RvdHlwZSA9IHtcclxuICAgICAgICBpbml0U3RydWN0dXJlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlID0gJCgnaHRtbCcpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9ICQodGhpcy5vcHRpb25zLmNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbmVyID0gdGhpcy5jb250YWluZXIuZmluZCh0aGlzLm9wdGlvbnMubWVudU9wZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuZHJvcCA9IHRoaXMuY29udGFpbmVyLmZpbmQodGhpcy5vcHRpb25zLm1lbnVEcm9wKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGF0dGFjaEV2ZW50czogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIGlmIChhY3RpdmF0ZVJlc2l6ZUhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2YXRlUmVzaXplSGFuZGxlcigpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZhdGVSZXNpemVIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5vdXRzaWRlQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuaXNPcGVuZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldC5jbG9zZXN0KHNlbGYub3BlbmVyKS5sZW5ndGggJiYgIXRhcmdldC5jbG9zZXN0KHNlbGYuZHJvcCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3BlbmVyQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi50b2dnbGUoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3BlbmVyLm9uKHRoaXMub3B0aW9ucy50b2dnbGVFdmVudCwgdGhpcy5vcGVuZXJDbGlja0hhbmRsZXIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNPcGVuZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuaGFzQ2xhc3ModGhpcy5vcHRpb25zLm1lbnVBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3ModGhpcy5vcHRpb25zLm1lbnVBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaGlkZU9uQ2xpY2tPdXRzaWRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2Uub24odGhpcy5vcHRpb25zLm91dHNpZGVDbGlja0V2ZW50LCB0aGlzLm91dHNpZGVDbGlja0hhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLm1lbnVBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaGlkZU9uQ2xpY2tPdXRzaWRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2Uub2ZmKHRoaXMub3B0aW9ucy5vdXRzaWRlQ2xpY2tFdmVudCwgdGhpcy5vdXRzaWRlQ2xpY2tIYW5kbGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNPcGVuZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5tZW51QWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICAgICB0aGlzLm9wZW5lci5vZmYodGhpcy5vcHRpb25zLnRvZ2dsZUV2ZW50LCB0aGlzLmNsaWNrSGFuZGxlcik7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZS5vZmYodGhpcy5vcHRpb25zLm91dHNpZGVDbGlja0V2ZW50LCB0aGlzLm91dHNpZGVDbGlja0hhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIGFjdGl2YXRlUmVzaXplSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB3aW4gPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIGRvYyA9ICQoJ2h0bWwnKSxcclxuICAgICAgICAgICAgcmVzaXplQ2xhc3MgPSAncmVzaXplLWFjdGl2ZScsXHJcbiAgICAgICAgICAgIGZsYWcsIHRpbWVyO1xyXG4gICAgICAgIHZhciByZW1vdmVDbGFzc0hhbmRsZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkb2MucmVtb3ZlQ2xhc3MocmVzaXplQ2xhc3MpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHJlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCFmbGFnKSB7XHJcbiAgICAgICAgICAgICAgICBmbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGRvYy5hZGRDbGFzcyhyZXNpemVDbGFzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KHJlbW92ZUNsYXNzSGFuZGxlciwgNTAwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHdpbi5vbigncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlJywgcmVzaXplSGFuZGxlcik7XHJcbiAgICB9O1xyXG5cclxuICAgICQuZm4ubW9iaWxlTmF2ID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucywgeyBjb250YWluZXI6IHRoaXMgfSksXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBNb2JpbGVOYXYocGFyYW1zKTtcclxuICAgICAgICAgICAgJC5kYXRhKHRoaXMsICdNb2JpbGVOYXYnLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59KGpRdWVyeSkpO1xyXG4iLCIvKlxyXG4gKiBqUXVlcnkgT3Blbi9DbG9zZSBwbHVnaW5cclxuICovXHJcbjtcclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgIGZ1bmN0aW9uIE9wZW5DbG9zZShvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe1xyXG4gICAgICAgICAgICBhZGRDbGFzc0JlZm9yZUFuaW1hdGlvbjogdHJ1ZSxcclxuICAgICAgICAgICAgaGlkZU9uQ2xpY2tPdXRzaWRlOiBmYWxzZSxcclxuICAgICAgICAgICAgYWN0aXZlQ2xhc3M6ICdhY3RpdmUnLFxyXG4gICAgICAgICAgICBvcGVuZXI6ICcub3BlbmVyJyxcclxuICAgICAgICAgICAgc2xpZGVyOiAnLnNsaWRlJyxcclxuICAgICAgICAgICAgYW5pbVNwZWVkOiA0MDAsXHJcbiAgICAgICAgICAgIGVmZmVjdDogJ2ZhZGUnLFxyXG4gICAgICAgICAgICBldmVudDogJ2NsaWNrJ1xyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfVxyXG4gICAgT3BlbkNsb3NlLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ob2xkZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmluZEVsZW1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaEV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYWtlQ2FsbGJhY2soJ29uSW5pdCcsIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaW5kRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvbGRlciA9ICQodGhpcy5vcHRpb25zLmhvbGRlcik7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbmVyID0gdGhpcy5ob2xkZXIuZmluZCh0aGlzLm9wdGlvbnMub3BlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5zbGlkZXIgPSB0aGlzLmhvbGRlci5maW5kKHRoaXMub3B0aW9ucy5zbGlkZXIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXR0YWNoRXZlbnRzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gYWRkIGhhbmRsZXJcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNsaWRlci5oYXNDbGFzcyhzbGlkZUhpZGRlbkNsYXNzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2hvd1NsaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaGlkZVNsaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNlbGYub3BlbmVyLmJpbmQoc2VsZi5vcHRpb25zLmV2ZW50LCB0aGlzLmV2ZW50SGFuZGxlcik7XHJcblxyXG4gICAgICAgICAgICAvLyBob3ZlciBtb2RlIGhhbmRsZXJcclxuICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5ldmVudCA9PT0gJ292ZXInKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm9wZW5lci5iaW5kKCdtb3VzZWVudGVyJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLmhvbGRlci5oYXNDbGFzcyhzZWxmLm9wdGlvbnMuYWN0aXZlQ2xhc3MpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2hvd1NsaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmhvbGRlci5iaW5kKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5oaWRlU2xpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBvdXRzaWRlIGNsaWNrIGhhbmRsZXJcclxuICAgICAgICAgICAgc2VsZi5vdXRzaWRlQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5oaWRlT25DbGlja091dHNpZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJChlLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQuaXMoc2VsZi5ob2xkZXIpICYmICF0YXJnZXQuY2xvc2VzdChzZWxmLmhvbGRlcikubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGlkZVNsaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gc2V0IGluaXRpYWwgc3R5bGVzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhvbGRlci5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpKSB7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5iaW5kKCdjbGljayB0b3VjaHN0YXJ0Jywgc2VsZi5vdXRzaWRlQ2xpY2tIYW5kbGVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVyLmFkZENsYXNzKHNsaWRlSGlkZGVuQ2xhc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzaG93U2xpZGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMuYWRkQ2xhc3NCZWZvcmVBbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaG9sZGVyLmFkZENsYXNzKHNlbGYub3B0aW9ucy5hY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5zbGlkZXIucmVtb3ZlQ2xhc3Moc2xpZGVIaWRkZW5DbGFzcyk7XHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLmJpbmQoJ2NsaWNrIHRvdWNoc3RhcnQnLCBzZWxmLm91dHNpZGVDbGlja0hhbmRsZXIpO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5tYWtlQ2FsbGJhY2soJ2FuaW1TdGFydCcsIHRydWUpO1xyXG4gICAgICAgICAgICB0b2dnbGVFZmZlY3RzW3NlbGYub3B0aW9ucy5lZmZlY3RdLnNob3coe1xyXG4gICAgICAgICAgICAgICAgYm94OiBzZWxmLnNsaWRlcixcclxuICAgICAgICAgICAgICAgIHNwZWVkOiBzZWxmLm9wdGlvbnMuYW5pbVNwZWVkLFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5vcHRpb25zLmFkZENsYXNzQmVmb3JlQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaG9sZGVyLmFkZENsYXNzKHNlbGYub3B0aW9ucy5hY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWFrZUNhbGxiYWNrKCdhbmltRW5kJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGlkZVNsaWRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmFkZENsYXNzQmVmb3JlQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmhvbGRlci5yZW1vdmVDbGFzcyhzZWxmLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLnVuYmluZCgnY2xpY2sgdG91Y2hzdGFydCcsIHNlbGYub3V0c2lkZUNsaWNrSGFuZGxlcik7XHJcblxyXG4gICAgICAgICAgICBzZWxmLm1ha2VDYWxsYmFjaygnYW5pbVN0YXJ0JywgZmFsc2UpO1xyXG4gICAgICAgICAgICB0b2dnbGVFZmZlY3RzW3NlbGYub3B0aW9ucy5lZmZlY3RdLmhpZGUoe1xyXG4gICAgICAgICAgICAgICAgYm94OiBzZWxmLnNsaWRlcixcclxuICAgICAgICAgICAgICAgIHNwZWVkOiBzZWxmLm9wdGlvbnMuYW5pbVNwZWVkLFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5vcHRpb25zLmFkZENsYXNzQmVmb3JlQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaG9sZGVyLnJlbW92ZUNsYXNzKHNlbGYub3B0aW9ucy5hY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2xpZGVyLmFkZENsYXNzKHNsaWRlSGlkZGVuQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWFrZUNhbGxiYWNrKCdhbmltRW5kJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNsaWRlci5yZW1vdmVDbGFzcyhzbGlkZUhpZGRlbkNsYXNzKS5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcclxuICAgICAgICAgICAgdGhpcy5vcGVuZXIudW5iaW5kKHRoaXMub3B0aW9ucy5ldmVudCwgdGhpcy5ldmVudEhhbmRsZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmhvbGRlci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpLnJlbW92ZURhdGEoJ09wZW5DbG9zZScpO1xyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS51bmJpbmQoJ2NsaWNrIHRvdWNoc3RhcnQnLCB0aGlzLm91dHNpZGVDbGlja0hhbmRsZXIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWFrZUNhbGxiYWNrOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zW25hbWVdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICBhcmdzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbbmFtZV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGFkZCBzdHlsZXNoZWV0IGZvciBzbGlkZSBvbiBET01SZWFkeVxyXG4gICAgdmFyIHNsaWRlSGlkZGVuQ2xhc3MgPSAnanMtc2xpZGUtaGlkZGVuJztcclxuICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdGFiU3R5bGVTaGVldCA9ICQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4nKVswXTtcclxuICAgICAgICB2YXIgdGFiU3R5bGVSdWxlID0gJy4nICsgc2xpZGVIaWRkZW5DbGFzcztcclxuICAgICAgICB0YWJTdHlsZVJ1bGUgKz0gJ3twb3NpdGlvbjphYnNvbHV0ZSAhaW1wb3J0YW50O2xlZnQ6LTk5OTlweCAhaW1wb3J0YW50O3RvcDotOTk5OXB4ICFpbXBvcnRhbnQ7ZGlzcGxheTpibG9jayAhaW1wb3J0YW50fSc7XHJcbiAgICAgICAgaWYgKHRhYlN0eWxlU2hlZXQuc3R5bGVTaGVldCkge1xyXG4gICAgICAgICAgICB0YWJTdHlsZVNoZWV0LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRhYlN0eWxlUnVsZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0YWJTdHlsZVNoZWV0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRhYlN0eWxlUnVsZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkKCdoZWFkJykuYXBwZW5kKHRhYlN0eWxlU2hlZXQpO1xyXG4gICAgfSgpKTtcclxuXHJcbiAgICAvLyBhbmltYXRpb24gZWZmZWN0c1xyXG4gICAgdmFyIHRvZ2dsZUVmZmVjdHMgPSB7XHJcbiAgICAgICAgc2xpZGU6IHtcclxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24obykge1xyXG4gICAgICAgICAgICAgICAgby5ib3guc3RvcCh0cnVlKS5oaWRlKCkuc2xpZGVEb3duKG8uc3BlZWQsIG8uY29tcGxldGUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoaWRlOiBmdW5jdGlvbihvKSB7XHJcbiAgICAgICAgICAgICAgICBvLmJveC5zdG9wKHRydWUpLnNsaWRlVXAoby5zcGVlZCwgby5jb21wbGV0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGZhZGU6IHtcclxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24obykge1xyXG4gICAgICAgICAgICAgICAgby5ib3guc3RvcCh0cnVlKS5oaWRlKCkuZmFkZUluKG8uc3BlZWQsIG8uY29tcGxldGUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoaWRlOiBmdW5jdGlvbihvKSB7XHJcbiAgICAgICAgICAgICAgICBvLmJveC5zdG9wKHRydWUpLmZhZGVPdXQoby5zcGVlZCwgby5jb21wbGV0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG5vbmU6IHtcclxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24obykge1xyXG4gICAgICAgICAgICAgICAgby5ib3guaGlkZSgpLnNob3coMCwgby5jb21wbGV0ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uKG8pIHtcclxuICAgICAgICAgICAgICAgIG8uYm94LmhpZGUoMCwgby5jb21wbGV0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGpRdWVyeSBwbHVnaW4gaW50ZXJmYWNlXHJcbiAgICAkLmZuLm9wZW5DbG9zZSA9IGZ1bmN0aW9uKG9wdCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGpRdWVyeSh0aGlzKS5kYXRhKCdPcGVuQ2xvc2UnLCBuZXcgT3BlbkNsb3NlKCQuZXh0ZW5kKG9wdCwgeyBob2xkZXI6IHRoaXMgfSkpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn0oalF1ZXJ5KSk7XHJcbiIsIi8vIHBhZ2UgaW5pdFxyXG5qUXVlcnkoZnVuY3Rpb24oKXtcclxuXHRpbml0VGFicygpO1xyXG59KTtcclxuXHJcbi8vIGNvbnRlbnQgdGFicyBpbml0XHJcbmZ1bmN0aW9uIGluaXRUYWJzKCkge1xyXG5cdGpRdWVyeSgndWwudGFic2V0JykudGFic2V0KHtcclxuXHRcdHRhYkxpbmtzOiAnYScsXHJcblx0XHRkZWZhdWx0VGFiOiBmYWxzZVxyXG5cdH0pO1xyXG59XHJcblxyXG4vKlxyXG4gKiBqUXVlcnkgVGFicyBwbHVnaW5cclxuICovXHJcblxyXG47KGZ1bmN0aW9uKCQsICR3aW4pIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGZ1bmN0aW9uIFRhYnNldCgkaG9sZGVyLCBvcHRpb25zKSB7XHJcblx0XHR0aGlzLiRob2xkZXIgPSAkaG9sZGVyO1xyXG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHJcblx0XHR0aGlzLmluaXQoKTtcclxuXHRcdHRoaXMubWFrZUNhbGxiYWNrKCdvbkluaXQnLCB0aGlzKTtcclxuXHR9XHJcblxyXG5cdFRhYnNldC5wcm90b3R5cGUgPSB7XHJcblx0XHRpbml0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhpcy4kdGFiTGlua3MgPSB0aGlzLiRob2xkZXIuZmluZCh0aGlzLm9wdGlvbnMudGFiTGlua3MpO1xyXG5cclxuXHRcdFx0dGhpcy5zZXRTdGFydEFjdGl2ZUluZGV4KCk7XHJcblx0XHRcdHRoaXMuc2V0QWN0aXZlVGFiKCk7XHJcblxyXG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLmF1dG9IZWlnaHQpIHtcclxuXHRcdFx0XHR0aGlzLiR0YWJIb2xkZXIgPSAkKHRoaXMuJHRhYkxpbmtzLmVxKDApLmF0dHIodGhpcy5vcHRpb25zLmF0dHJpYikpLnBhcmVudCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHNldFN0YXJ0QWN0aXZlSW5kZXg6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgJGNsYXNzVGFyZ2V0cyA9IHRoaXMuZ2V0Q2xhc3NUYXJnZXQodGhpcy4kdGFiTGlua3MpO1xyXG5cdFx0XHR2YXIgJGFjdGl2ZUxpbmsgPSAkY2xhc3NUYXJnZXRzLmZpbHRlcignLicgKyB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xyXG5cdFx0XHR2YXIgJGhhc2hMaW5rID0gdGhpcy4kdGFiTGlua3MuZmlsdGVyKCdbJyArIHRoaXMub3B0aW9ucy5hdHRyaWIgKyAnPVwiJyArIGxvY2F0aW9uLmhhc2ggKyAnXCJdJyk7XHJcblx0XHRcdHZhciBhY3RpdmVJbmRleDtcclxuXHJcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMuY2hlY2tIYXNoICYmICRoYXNoTGluay5sZW5ndGgpIHtcclxuXHRcdFx0XHQkYWN0aXZlTGluayA9ICRoYXNoTGluaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0YWN0aXZlSW5kZXggPSAkY2xhc3NUYXJnZXRzLmluZGV4KCRhY3RpdmVMaW5rKTtcclxuXHJcblx0XHRcdHRoaXMuYWN0aXZlVGFiSW5kZXggPSB0aGlzLnByZXZUYWJJbmRleCA9IChhY3RpdmVJbmRleCA9PT0gLTEgPyAodGhpcy5vcHRpb25zLmRlZmF1bHRUYWIgPyAwIDogbnVsbCkgOiBhY3RpdmVJbmRleCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdHNldEFjdGl2ZVRhYjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHRcdHRoaXMuJHRhYkxpbmtzLmVhY2goZnVuY3Rpb24oaSwgbGluaykge1xyXG5cdFx0XHRcdHZhciAkbGluayA9ICQobGluayk7XHJcblx0XHRcdFx0dmFyICRjbGFzc1RhcmdldCA9IHNlbGYuZ2V0Q2xhc3NUYXJnZXQoJGxpbmspO1xyXG5cdFx0XHRcdHZhciAkdGFiID0gJCgkbGluay5hdHRyKHNlbGYub3B0aW9ucy5hdHRyaWIpKTtcclxuXHJcblx0XHRcdFx0aWYgKGkgIT09IHNlbGYuYWN0aXZlVGFiSW5kZXgpIHtcclxuXHRcdFx0XHRcdCRjbGFzc1RhcmdldC5yZW1vdmVDbGFzcyhzZWxmLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xyXG5cdFx0XHRcdFx0JHRhYi5hZGRDbGFzcyhzZWxmLm9wdGlvbnMudGFiSGlkZGVuQ2xhc3MpLnJlbW92ZUNsYXNzKHNlbGYub3B0aW9ucy5hY3RpdmVDbGFzcyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdCRjbGFzc1RhcmdldC5hZGRDbGFzcyhzZWxmLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xyXG5cdFx0XHRcdFx0JHRhYi5yZW1vdmVDbGFzcyhzZWxmLm9wdGlvbnMudGFiSGlkZGVuQ2xhc3MpLmFkZENsYXNzKHNlbGYub3B0aW9ucy5hY3RpdmVDbGFzcyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRzZWxmLmF0dGFjaFRhYkxpbmsoJGxpbmssIGkpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0YXR0YWNoVGFiTGluazogZnVuY3Rpb24oJGxpbmssIGkpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdFx0JGxpbmsub24odGhpcy5vcHRpb25zLmV2ZW50ICsgJy50YWJzZXQnLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0XHRpZiAoc2VsZi5hY3RpdmVUYWJJbmRleCA9PT0gc2VsZi5wcmV2VGFiSW5kZXggJiYgc2VsZi5hY3RpdmVUYWJJbmRleCAhPT0gaSkge1xyXG5cdFx0XHRcdFx0c2VsZi5hY3RpdmVUYWJJbmRleCA9IGk7XHJcblx0XHRcdFx0XHRzZWxmLnN3aXRjaFRhYnMoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHJcblx0XHRyZXNpemVIb2xkZXI6IGZ1bmN0aW9uKGhlaWdodCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0XHRpZiAoaGVpZ2h0KSB7XHJcblx0XHRcdFx0dGhpcy4kdGFiSG9sZGVyLmhlaWdodChoZWlnaHQpO1xyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRzZWxmLiR0YWJIb2xkZXIuYWRkQ2xhc3MoJ3RyYW5zaXRpb24nKTtcclxuXHRcdFx0XHR9LCAxMCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VsZi4kdGFiSG9sZGVyLnJlbW92ZUNsYXNzKCd0cmFuc2l0aW9uJykuaGVpZ2h0KCcnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzd2l0Y2hUYWJzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdFx0dmFyICRwcmV2TGluayA9IHRoaXMuJHRhYkxpbmtzLmVxKHRoaXMucHJldlRhYkluZGV4KTtcclxuXHRcdFx0dmFyICRuZXh0TGluayA9IHRoaXMuJHRhYkxpbmtzLmVxKHRoaXMuYWN0aXZlVGFiSW5kZXgpO1xyXG5cclxuXHRcdFx0dmFyICRwcmV2VGFiID0gdGhpcy5nZXRUYWIoJHByZXZMaW5rKTtcclxuXHRcdFx0dmFyICRuZXh0VGFiID0gdGhpcy5nZXRUYWIoJG5leHRMaW5rKTtcclxuXHJcblx0XHRcdCRwcmV2VGFiLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XHJcblxyXG5cdFx0XHRpZiAoc2VsZi5oYXZlVGFiSG9sZGVyKCkpIHtcclxuXHRcdFx0XHR0aGlzLnJlc2l6ZUhvbGRlcigkcHJldlRhYi5vdXRlckhlaWdodCgpKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRzZWxmLmdldENsYXNzVGFyZ2V0KCRwcmV2TGluaykucmVtb3ZlQ2xhc3Moc2VsZi5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcclxuXHJcblx0XHRcdFx0JHByZXZUYWIuYWRkQ2xhc3Moc2VsZi5vcHRpb25zLnRhYkhpZGRlbkNsYXNzKTtcclxuXHRcdFx0XHQkbmV4dFRhYi5yZW1vdmVDbGFzcyhzZWxmLm9wdGlvbnMudGFiSGlkZGVuQ2xhc3MpLmFkZENsYXNzKHNlbGYub3B0aW9ucy5hY3RpdmVDbGFzcyk7XHJcblxyXG5cdFx0XHRcdHNlbGYuZ2V0Q2xhc3NUYXJnZXQoJG5leHRMaW5rKS5hZGRDbGFzcyhzZWxmLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xyXG5cclxuXHRcdFx0XHRpZiAoc2VsZi5oYXZlVGFiSG9sZGVyKCkpIHtcclxuXHRcdFx0XHRcdHNlbGYucmVzaXplSG9sZGVyKCRuZXh0VGFiLm91dGVySGVpZ2h0KCkpO1xyXG5cclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHNlbGYucmVzaXplSG9sZGVyKCk7XHJcblx0XHRcdFx0XHRcdHNlbGYucHJldlRhYkluZGV4ID0gc2VsZi5hY3RpdmVUYWJJbmRleDtcclxuXHRcdFx0XHRcdH0sIHNlbGYub3B0aW9ucy5hbmltU3BlZWQpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzZWxmLnByZXZUYWJJbmRleCA9IHNlbGYuYWN0aXZlVGFiSW5kZXg7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIG9uY2hhbmdlIGNhbGxiYWNrXHJcblx0XHRcdFx0c2VsZi5tYWtlQ2FsbGJhY2soJ29uQ2hhbmdlJywgc2VsZiwgJG5leHRMaW5rKTtcclxuXHRcdFx0fSwgdGhpcy5vcHRpb25zLmF1dG9IZWlnaHQgPyB0aGlzLm9wdGlvbnMuYW5pbVNwZWVkIDogMSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldENsYXNzVGFyZ2V0OiBmdW5jdGlvbigkbGluaykge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmFkZFRvUGFyZW50ID8gJGxpbmsucGFyZW50KCkgOiAkbGluaztcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0QWN0aXZlVGFiOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0VGFiKHRoaXMuJHRhYkxpbmtzLmVxKHRoaXMuYWN0aXZlVGFiSW5kZXgpKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0VGFiOiBmdW5jdGlvbigkbGluaykge1xyXG5cdFx0XHRyZXR1cm4gJCgkbGluay5hdHRyKHRoaXMub3B0aW9ucy5hdHRyaWIpKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0aGF2ZVRhYkhvbGRlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLiR0YWJIb2xkZXIgJiYgdGhpcy4kdGFiSG9sZGVyLmxlbmd0aDtcclxuXHRcdH0sXHJcblxyXG5cdFx0bWFrZUNhbGxiYWNrOiBmdW5jdGlvbihuYW1lKSB7XHJcblx0XHRcdGlmKHR5cGVvZiB0aGlzLm9wdGlvbnNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcblx0XHRcdFx0YXJncy5zaGlmdCgpO1xyXG5cdFx0XHRcdHRoaXMub3B0aW9uc1tuYW1lXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRkZXN0cm95OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdFx0dGhpcy4kdGFiTGlua3Mub2ZmKCcudGFic2V0JykuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgJGxpbmsgPSAkKHRoaXMpO1xyXG5cclxuXHRcdFx0XHRzZWxmLmdldENsYXNzVGFyZ2V0KCRsaW5rKS5yZW1vdmVDbGFzcyhzZWxmLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xyXG5cdFx0XHRcdCQoJGxpbmsuYXR0cihzZWxmLm9wdGlvbnMuYXR0cmliKSkucmVtb3ZlQ2xhc3Moc2VsZi5vcHRpb25zLmFjdGl2ZUNsYXNzICsgJyAnICsgc2VsZi5vcHRpb25zLnRhYkhpZGRlbkNsYXNzKTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHR0aGlzLiRob2xkZXIucmVtb3ZlRGF0YSgnVGFic2V0Jyk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0JC5mbi50YWJzZXQgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcblx0XHRvcHRpb25zID0gJC5leHRlbmQoe1xyXG5cdFx0XHRhY3RpdmVDbGFzczogJ2FjdGl2ZScsXHJcblx0XHRcdGFkZFRvUGFyZW50OiBmYWxzZSxcclxuXHRcdFx0YXV0b0hlaWdodDogZmFsc2UsXHJcblx0XHRcdGNoZWNrSGFzaDogZmFsc2UsXHJcblx0XHRcdGRlZmF1bHRUYWI6IHRydWUsXHJcblx0XHRcdGFuaW1TcGVlZDogNTAwLFxyXG5cdFx0XHR0YWJMaW5rczogJ2EnLFxyXG5cdFx0XHRhdHRyaWI6ICdocmVmJyxcclxuXHRcdFx0ZXZlbnQ6ICdjbGljaycsXHJcblx0XHRcdHRhYkhpZGRlbkNsYXNzOiAnanMtdGFiLWhpZGRlbidcclxuXHRcdH0sIG9wdGlvbnMpO1xyXG5cdFx0b3B0aW9ucy5hdXRvSGVpZ2h0ID0gb3B0aW9ucy5hdXRvSGVpZ2h0ICYmICQuc3VwcG9ydC5vcGFjaXR5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciAkaG9sZGVyID0gJCh0aGlzKTtcclxuXHJcblx0XHRcdGlmICghJGhvbGRlci5kYXRhKCdUYWJzZXQnKSkge1xyXG5cdFx0XHRcdCRob2xkZXIuZGF0YSgnVGFic2V0JywgbmV3IFRhYnNldCgkaG9sZGVyLCBvcHRpb25zKSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH07XHJcbn0oalF1ZXJ5LCBqUXVlcnkod2luZG93KSkpOyJdfQ==
