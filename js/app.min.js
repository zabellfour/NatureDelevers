(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

require('./modules/nav');

require('./modules/tabs');

require('./modules/openClose');

var initJs = function initJs() {

    $('div.open-box-text').openClose({
        hideOnClickOutside: true,
        activeClass: 'active',
        opener: '.open-text-btn',
        slider: '.holder-text',
        animSpeed: 400,
        effect: 'slide'
    });
    $('body').on('click', '.scroll-link', function () {
        var offset = $('.body-holder').position().top;

        $('body, .modal').stop(true, false).animate({ scrollTop: offset }, 1000);
    });
    $(".fancybox-media").fancybox({
        openEffect: 'none',
        closeEffect: 'none',
        scrolling: 'no',
        helpers: {
            media: {}
        }
    });
    $(function () {
        if ($(window).width() > 1024) {
            $('.scroll-block').jScrollPane();
        }
    });
    $(".economes-popup").fancybox({
        maxWidth: 500,
        maxHeight: 400,
        fitToView: true,
        autoSize: true,
        closeClick: false,
        openEffect: 'none',
        closeEffect: 'none'
    });
    skrollr.init({ forceHeight: false });
};

var animation = function animation() {
    window.sr = new ScrollReveal();
    if (document.getElementsByClassName("animation-demarche-nature-deleveurs").length != 0) {
        console.log('animation-demarche-nature-deleveurs');
        sr.reveal('.appear', {
            origin: 'top',
            viewFactor: 0.2,
            distance: '100px',
            scale: 1,
            reset: false
        }, 450);
        sr.reveal('.arrowUn', {
            origin: 'left',
            scale: 1,
            distance: '550px',
            easing: 'ease-out'
        });
        sr.reveal('.arrowTop', {
            origin: 'top',
            scale: 1,
            distance: '500px',
            easing: 'ease-out'
        });
        sr.reveal('.arrowRight', {
            origin: 'right',
            scale: 1,
            distance: '150px',
            easing: 'ease-out'
        });
        sr.reveal('.logoBottom', {
            origin: 'bottom',
            delay: 2000,
            duration: 1000,
            scale: 1,
            distance: '250px',
            easing: 'ease-out'
        });
    };
    if (document.getElementsByClassName("animation-etape-tracabilite").length != 0) {
        console.log('animation-etape-tracabilite');
        sr.reveal('.appear', {
            origin: 'top',
            viewFactor: 0.2,
            distance: '0px',
            scale: 1,
            reset: true,
            easing: 'ease-out'
        }, 350);
        sr.reveal('.badge', {
            origin: 'bottom',
            delay: 50,
            rotate: { x: 80, y: 50, z: 0 },
            distance: '50px',
            scale: 1
        });
        sr.reveal('.arrowTop', {
            origin: 'top',
            scale: 1,
            distance: '100px',
            easing: 'ease-out'
        });
        sr.reveal('.arrowLeft', {
            origin: 'left',
            scale: 1,
            distance: '100px',
            easing: 'ease-out'
        });
    };
    if (document.getElementsByClassName("animation-etape-alimentation").length != 0) {
        console.log('animation-etape-alimentation');
        sr.reveal('.appear', {
            origin: 'top',
            viewFactor: 0.2,
            distance: '-50px',
            scale: 1,
            reset: true
        }, 50);
        sr.reveal('.arrowUn', {
            origin: 'left',
            delay: 50,
            distance: '250px',
            easing: 'ease-out'
        });
        sr.reveal('.arrowTop', {
            origin: 'top',
            delay: 50,
            distance: '200px'
        });
        sr.reveal('.arrowRight', {
            origin: 'right',
            distance: '150px',
            easing: 'ease-out'
        });
    };
};

var customNav = function customNav() {
    $(".drop-opener").click(function (event) {
        event.preventDefault();
        $(this).parent().find(".dropdown").toggleClass("opened");
    });
    $("body").click(function (e) {
        if ($(e.target).closest(".holder2").length == 0) $(".dropdown").removeClass("opened");
        if ($(e.target).closest(".share-opened").length == 0) $(".share-holder").removeClass("share-opened");
    });
    $(".share-holder").click(function (event) {
        event.preventDefault();
        $(this).toggleClass("share-opened");
    });
    $(".holder2 .dropdown > li > a").click(function (event) {
        event.preventDefault();
        var path = $(this).attr("href");

        $("#modalChapter .modal-body").load(path);
        if (document.location.href.indexOf('journee.html') + 1) {
            console.log('');
        } else {
            $(".diagram-holder .svg").removeClass("animation-demarche-nature-deleveurs");
        };
        $('#modalChapter').modal('show');
        $('#modalChapter').modal('handleUpdate');
        $("body").removeClass("nav-active");
    });
    $(".baner-bottom .btn-footer").click(function (event) {
        event.preventDefault();
        if (document.location.href.indexOf('journee.html') + 1) {
            $('#modalChapter').modal('hide');
        } else {
            document.location.href = 'journee.html';
        }
    });
    $(".close-modal").click(function (event) {
        if (document.location.href.indexOf('journee.html') + 1) {
            console.log('');
        } else {
            setTimeout(function () {
                $(".modal-content .modal-body").empty();
            }, 300);
            $(".diagram-holder .svg").addClass("animation-demarche-nature-deleveurs");
        };
    });
};

jQuery(document).ready(function ($) {
    initJs();
    customNav();
    animation();
    $('#modalChapter').on('shown.bs.modal', function () {
        skrollr.init().destroy();
        skrollr.init({ forceHeight: false });
        initJs();
        customNav();
        setTimeout(function () {
            animation();
        }, 300);
    });
    $('#modalChapter').on('hidden.bs.modal', function () {
        skrollr.init().destroy;
    });
});

},{"./modules/nav":2,"./modules/openClose":3,"./modules/tabs":4}],2:[function(require,module,exports){
'use strict';

jQuery(function () {
    initMobileNav();
});

// mobile menu init
function initMobileNav() {
    jQuery('body').mobileNav({
        hideOnClickOutside: true,
        menuActiveClass: 'nav-active',
        menuOpener: '.menu-opener',
        menuDrop: '.nav-holder'
    });
}

/*
 * Simple Mobile Navigation
 */
;
(function ($) {
    function MobileNav(options) {
        this.options = $.extend({
            container: null,
            hideOnClickOutside: false,
            menuActiveClass: 'nav-active',
            menuOpener: '.nav-opener',
            menuDrop: '.nav-drop',
            toggleEvent: 'click',
            outsideClickEvent: 'click touchstart pointerdown MSPointerDown'
        }, options);
        this.initStructure();
        this.attachEvents();
    }
    MobileNav.prototype = {
        initStructure: function initStructure() {
            this.page = $('html');
            this.container = $(this.options.container);
            this.opener = this.container.find(this.options.menuOpener);
            this.drop = this.container.find(this.options.menuDrop);
        },
        attachEvents: function attachEvents() {
            var self = this;

            if (activateResizeHandler) {
                activateResizeHandler();
                activateResizeHandler = null;
            }

            this.outsideClickHandler = function (e) {
                if (self.isOpened()) {
                    var target = $(e.target);
                    if (!target.closest(self.opener).length && !target.closest(self.drop).length) {
                        self.hide();
                    }
                }
            };

            this.openerClickHandler = function (e) {
                e.preventDefault();
                self.toggle();
            };

            this.opener.on(this.options.toggleEvent, this.openerClickHandler);
        },
        isOpened: function isOpened() {
            return this.container.hasClass(this.options.menuActiveClass);
        },
        show: function show() {
            this.container.addClass(this.options.menuActiveClass);
            if (document.location.href.indexOf('journee.html') + 1) {
                onVideoPauseButtonClick();
                playSound(false);
            }
            if (this.options.hideOnClickOutside) {
                this.page.on(this.options.outsideClickEvent, this.outsideClickHandler);
            }
        },
        hide: function hide() {
            this.container.removeClass(this.options.menuActiveClass);
            if (document.location.href.indexOf('journee.html') + 1) {
                onVideoPlayButtonClick();
                playSound(true);
            }
            if (this.options.hideOnClickOutside) {
                this.page.off(this.options.outsideClickEvent, this.outsideClickHandler);
            }
        },
        toggle: function toggle() {
            if (this.isOpened()) {
                this.hide();
            } else {
                this.show();
            }
        },
        destroy: function destroy() {
            this.container.removeClass(this.options.menuActiveClass);
            this.opener.off(this.options.toggleEvent, this.clickHandler);
            this.page.off(this.options.outsideClickEvent, this.outsideClickHandler);
        }
    };

    var activateResizeHandler = function activateResizeHandler() {
        var win = $(window),
            doc = $('html'),
            resizeClass = 'resize-active',
            flag,
            timer;
        var removeClassHandler = function removeClassHandler() {
            flag = false;
            doc.removeClass(resizeClass);
        };
        var resizeHandler = function resizeHandler() {
            if (!flag) {
                flag = true;
                doc.addClass(resizeClass);
            }
            clearTimeout(timer);
            timer = setTimeout(removeClassHandler, 500);
        };
        win.on('resize orientationchange', resizeHandler);
    };

    $.fn.mobileNav = function (options) {
        return this.each(function () {
            var params = $.extend({}, options, { container: this }),
                instance = new MobileNav(params);
            $.data(this, 'MobileNav', instance);
        });
    };
})(jQuery);

},{}],3:[function(require,module,exports){
'use strict';

/*
 * jQuery Open/Close plugin
 */

;
(function ($) {
    function OpenClose(options) {
        this.options = $.extend({
            addClassBeforeAnimation: true,
            hideOnClickOutside: false,
            activeClass: 'active',
            opener: '.opener',
            slider: '.slide',
            animSpeed: 400,
            effect: 'fade',
            event: 'click'
        }, options);
        this.init();
    }
    OpenClose.prototype = {
        init: function init() {
            if (this.options.holder) {
                this.findElements();
                this.attachEvents();
                this.makeCallback('onInit', this);
            }
        },
        findElements: function findElements() {
            this.holder = $(this.options.holder);
            this.opener = this.holder.find(this.options.opener);
            this.slider = this.holder.find(this.options.slider);
        },
        attachEvents: function attachEvents() {
            // add handler
            var self = this;
            this.eventHandler = function (e) {
                e.preventDefault();
                if (self.slider.hasClass(slideHiddenClass)) {
                    self.showSlide();
                } else {
                    self.hideSlide();
                }
            };
            self.opener.bind(self.options.event, this.eventHandler);

            // hover mode handler
            if (self.options.event === 'over') {
                self.opener.bind('mouseenter', function () {
                    if (!self.holder.hasClass(self.options.activeClass)) {
                        self.showSlide();
                    }
                });
                self.holder.bind('mouseleave', function () {
                    self.hideSlide();
                });
            }

            // outside click handler
            self.outsideClickHandler = function (e) {
                if (self.options.hideOnClickOutside) {
                    var target = $(e.target);
                    if (!target.is(self.holder) && !target.closest(self.holder).length) {
                        self.hideSlide();
                    }
                }
            };

            // set initial styles
            if (this.holder.hasClass(this.options.activeClass)) {
                $(document).bind('click touchstart', self.outsideClickHandler);
            } else {
                this.slider.addClass(slideHiddenClass);
            }
        },
        showSlide: function showSlide() {
            var self = this;
            if (self.options.addClassBeforeAnimation) {
                self.holder.addClass(self.options.activeClass);
            }
            self.slider.removeClass(slideHiddenClass);
            $(document).bind('click touchstart', self.outsideClickHandler);

            self.makeCallback('animStart', true);
            toggleEffects[self.options.effect].show({
                box: self.slider,
                speed: self.options.animSpeed,
                complete: function complete() {
                    if (!self.options.addClassBeforeAnimation) {
                        self.holder.addClass(self.options.activeClass);
                    }
                    self.makeCallback('animEnd', true);
                }
            });
        },
        hideSlide: function hideSlide() {
            var self = this;
            if (self.options.addClassBeforeAnimation) {
                self.holder.removeClass(self.options.activeClass);
            }
            $(document).unbind('click touchstart', self.outsideClickHandler);

            self.makeCallback('animStart', false);
            toggleEffects[self.options.effect].hide({
                box: self.slider,
                speed: self.options.animSpeed,
                complete: function complete() {
                    if (!self.options.addClassBeforeAnimation) {
                        self.holder.removeClass(self.options.activeClass);
                    }
                    self.slider.addClass(slideHiddenClass);
                    self.makeCallback('animEnd', false);
                }
            });
        },
        destroy: function destroy() {
            this.slider.removeClass(slideHiddenClass).css({ display: '' });
            this.opener.unbind(this.options.event, this.eventHandler);
            this.holder.removeClass(this.options.activeClass).removeData('OpenClose');
            $(document).unbind('click touchstart', this.outsideClickHandler);
        },
        makeCallback: function makeCallback(name) {
            if (typeof this.options[name] === 'function') {
                var args = Array.prototype.slice.call(arguments);
                args.shift();
                this.options[name].apply(this, args);
            }
        }
    };

    // add stylesheet for slide on DOMReady
    var slideHiddenClass = 'js-slide-hidden';
    (function () {
        var tabStyleSheet = $('<style type="text/css">')[0];
        var tabStyleRule = '.' + slideHiddenClass;
        tabStyleRule += '{position:absolute !important;left:-9999px !important;top:-9999px !important;display:block !important}';
        if (tabStyleSheet.styleSheet) {
            tabStyleSheet.styleSheet.cssText = tabStyleRule;
        } else {
            tabStyleSheet.appendChild(document.createTextNode(tabStyleRule));
        }
        $('head').append(tabStyleSheet);
    })();

    // animation effects
    var toggleEffects = {
        slide: {
            show: function show(o) {
                o.box.stop(true).hide().slideDown(o.speed, o.complete);
            },
            hide: function hide(o) {
                o.box.stop(true).slideUp(o.speed, o.complete);
            }
        },
        fade: {
            show: function show(o) {
                o.box.stop(true).hide().fadeIn(o.speed, o.complete);
            },
            hide: function hide(o) {
                o.box.stop(true).fadeOut(o.speed, o.complete);
            }
        },
        none: {
            show: function show(o) {
                o.box.hide().show(0, o.complete);
            },
            hide: function hide(o) {
                o.box.hide(0, o.complete);
            }
        }
    };

    // jQuery plugin interface
    $.fn.openClose = function (opt) {
        return this.each(function () {
            jQuery(this).data('OpenClose', new OpenClose($.extend(opt, { holder: this })));
        });
    };
})(jQuery);

},{}],4:[function(require,module,exports){
'use strict';

// page init
jQuery(function () {
	initTabs();
});

// content tabs init
function initTabs() {
	jQuery('ul.tabset').tabset({
		tabLinks: 'a',
		defaultTab: false
	});
}

/*
 * jQuery Tabs plugin
 */

;(function ($, $win) {
	'use strict';

	function Tabset($holder, options) {
		this.$holder = $holder;
		this.options = options;

		this.init();
		this.makeCallback('onInit', this);
	}

	Tabset.prototype = {
		init: function init() {
			this.$tabLinks = this.$holder.find(this.options.tabLinks);

			this.setStartActiveIndex();
			this.setActiveTab();

			if (this.options.autoHeight) {
				this.$tabHolder = $(this.$tabLinks.eq(0).attr(this.options.attrib)).parent();
			}
		},

		setStartActiveIndex: function setStartActiveIndex() {
			var $classTargets = this.getClassTarget(this.$tabLinks);
			var $activeLink = $classTargets.filter('.' + this.options.activeClass);
			var $hashLink = this.$tabLinks.filter('[' + this.options.attrib + '="' + location.hash + '"]');
			var activeIndex;

			if (this.options.checkHash && $hashLink.length) {
				$activeLink = $hashLink;
			}

			activeIndex = $classTargets.index($activeLink);

			this.activeTabIndex = this.prevTabIndex = activeIndex === -1 ? this.options.defaultTab ? 0 : null : activeIndex;
		},

		setActiveTab: function setActiveTab() {
			var self = this;

			this.$tabLinks.each(function (i, link) {
				var $link = $(link);
				var $classTarget = self.getClassTarget($link);
				var $tab = $($link.attr(self.options.attrib));

				if (i !== self.activeTabIndex) {
					$classTarget.removeClass(self.options.activeClass);
					$tab.addClass(self.options.tabHiddenClass).removeClass(self.options.activeClass);
				} else {
					$classTarget.addClass(self.options.activeClass);
					$tab.removeClass(self.options.tabHiddenClass).addClass(self.options.activeClass);
				}

				self.attachTabLink($link, i);
			});
		},

		attachTabLink: function attachTabLink($link, i) {
			var self = this;

			$link.on(this.options.event + '.tabset', function (e) {
				e.preventDefault();

				if (self.activeTabIndex === self.prevTabIndex && self.activeTabIndex !== i) {
					self.activeTabIndex = i;
					self.switchTabs();
				}
			});
		},

		resizeHolder: function resizeHolder(height) {
			var self = this;

			if (height) {
				this.$tabHolder.height(height);
				setTimeout(function () {
					self.$tabHolder.addClass('transition');
				}, 10);
			} else {
				self.$tabHolder.removeClass('transition').height('');
			}
		},

		switchTabs: function switchTabs() {
			var self = this;

			var $prevLink = this.$tabLinks.eq(this.prevTabIndex);
			var $nextLink = this.$tabLinks.eq(this.activeTabIndex);

			var $prevTab = this.getTab($prevLink);
			var $nextTab = this.getTab($nextLink);

			$prevTab.removeClass(this.options.activeClass);

			if (self.haveTabHolder()) {
				this.resizeHolder($prevTab.outerHeight());
			}

			setTimeout(function () {
				self.getClassTarget($prevLink).removeClass(self.options.activeClass);

				$prevTab.addClass(self.options.tabHiddenClass);
				$nextTab.removeClass(self.options.tabHiddenClass).addClass(self.options.activeClass);

				self.getClassTarget($nextLink).addClass(self.options.activeClass);

				if (self.haveTabHolder()) {
					self.resizeHolder($nextTab.outerHeight());

					setTimeout(function () {
						self.resizeHolder();
						self.prevTabIndex = self.activeTabIndex;
					}, self.options.animSpeed);
				} else {
					self.prevTabIndex = self.activeTabIndex;
				}
				// onchange callback
				self.makeCallback('onChange', self, $nextLink);
			}, this.options.autoHeight ? this.options.animSpeed : 1);
		},

		getClassTarget: function getClassTarget($link) {
			return this.options.addToParent ? $link.parent() : $link;
		},

		getActiveTab: function getActiveTab() {
			return this.getTab(this.$tabLinks.eq(this.activeTabIndex));
		},

		getTab: function getTab($link) {
			return $($link.attr(this.options.attrib));
		},

		haveTabHolder: function haveTabHolder() {
			return this.$tabHolder && this.$tabHolder.length;
		},

		makeCallback: function makeCallback(name) {
			if (typeof this.options[name] === 'function') {
				var args = Array.prototype.slice.call(arguments);
				args.shift();
				this.options[name].apply(this, args);
			}
		},

		destroy: function destroy() {
			var self = this;

			this.$tabLinks.off('.tabset').each(function () {
				var $link = $(this);

				self.getClassTarget($link).removeClass(self.options.activeClass);
				$($link.attr(self.options.attrib)).removeClass(self.options.activeClass + ' ' + self.options.tabHiddenClass);
			});

			this.$holder.removeData('Tabset');
		}
	};

	$.fn.tabset = function (options) {
		options = $.extend({
			activeClass: 'active',
			addToParent: false,
			autoHeight: false,
			checkHash: false,
			defaultTab: true,
			animSpeed: 500,
			tabLinks: 'a',
			attrib: 'href',
			event: 'click',
			tabHiddenClass: 'js-tab-hidden'
		}, options);
		options.autoHeight = options.autoHeight && $.support.opacity;

		return this.each(function () {
			var $holder = $(this);

			if (!$holder.data('Tabset')) {
				$holder.data('Tabset', new Tabset($holder, options));
			}
		});
	};
})(jQuery, jQuery(window));

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
